import requests
import os
from datetime import datetime

class WeatherService:
    def __init__(self, api_key, city='Kyiv', country='UA'):
        self.api_key = api_key
        self.city = city
        self.country = country
        self.base_url = 'https://api.openweathermap.org/data/2.5'
    
    def get_current_weather(self):
        try:
            url = f"{self.base_url}/weather"
            params = {
                'q': f"{self.city},{self.country}",
                'appid': self.api_key,
                'units': 'metric',
                'lang': 'uk'
            }
            
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            return {
                'success': True,
                'temperature': round(data['main']['temp']),
                'description': data['weather'][0]['description'].capitalize(),
                'icon': data['weather'][0]['icon'],
                'humidity': data['main']['humidity'],
                'wind_speed': round(data['wind']['speed']),
                'feels_like': round(data['main']['feels_like']),
                'city': data['name']
            }
            
        except requests.exceptions.RequestException as e:
            return {
                'success': False,
                'error': f'–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {str(e)}'
            }
        except KeyError as e:
            return {
                'success': False,
                'error': f'–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API: {str(e)}'
            }
        except Exception as e:
            return {
                'success': False,
                'error': f'–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}'
            }
    
    def get_pizza_recommendation(self, weather_data):
        if not weather_data.get('success'):
            return {
                'title': 'üçï –ó–∞–≤–∂–¥–∏ –≥–∞—Ä–Ω–∏–π —á–∞—Å –¥–ª—è –ø—ñ—Ü–∏!',
                'message': '–ù–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ–≥–æ–¥–∏, –Ω–∞—à—ñ –ø—ñ—Ü–∏ –∑–∞–≤–∂–¥–∏ —Å–º–∞—á–Ω—ñ!',
                'recommended_pizza': '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞'
            }
        
        temp = weather_data.get('temperature', 20)
        description = weather_data.get('description', '').lower()

        if temp >= 25:
            return {
                'title': 'üåû –°–ø–µ–∫–æ—Ç–Ω–∞ –ø–æ–≥–æ–¥–∞!',
                'message': '–í —Ç–∞–∫—É –∂–∞—Ä—É —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ª–µ–≥–∫—ñ –ø—ñ—Ü–∏ –∑ –æ–≤–æ—á–∞–º–∏ —Ç–∞ —Å–≤—ñ–∂–∏–º–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞–º–∏.',
                'recommended_pizza': '–û–≤–æ—á–µ–≤–∞',
                'reason': '–õ–µ–≥–∫–∞ —Ç–∞ –æ—Å–≤—ñ–∂–∞—é—á–∞'
            }
        elif temp <= 5:
            return {
                'title': '‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ –Ω–∞ –≤—É–ª–∏—Ü—ñ!',
                'message': '–ó—ñ–≥—Ä—ñ–π—Ç–µ—Å—è –Ω–∞—à–∏–º–∏ —Å–∏—Ç–Ω–∏–º–∏ –º\'—è—Å–Ω–∏–º–∏ –ø—ñ—Ü–∞–º–∏!',
                'recommended_pizza': '–ú\'—è—Å–Ω–∞',
                'reason': '–°–∏—Ç–Ω–∞ —Ç–∞ –∑—ñ–≥—Ä—ñ–≤–∞–ª—å–Ω–∞'
            }
        elif '–¥–æ—â' in description or 'rain' in description:
            return {
                'title': 'üåßÔ∏è –î–æ—â–æ–≤–∞ –ø–æ–≥–æ–¥–∞!',
                'message': '–í –¥–æ—â–æ–≤—É –ø–æ–≥–æ–¥—É –Ω–µ–º–∞—î –Ω—ñ—á–æ–≥–æ –∫—Ä–∞—â–æ–≥–æ –∑–∞ –∫–ª–∞—Å–∏—á–Ω—É –ø—ñ—Ü—É –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é –¥–æ–¥–æ–º—É!',
                'recommended_pizza': '–ü–µ–ø–µ—Ä–æ–Ω—ñ',
                'reason': '–ö–ª–∞—Å–∏–∫–∞ –¥–ª—è –∑–∞—Ç–∏—à–∫—É'
            }
        elif '—Å–Ω—ñ–≥' in description or 'snow' in description:
            return {
                'title': '‚ùÑÔ∏è –°–Ω—ñ–∂–Ω–∞ –ø–æ–≥–æ–¥–∞!',
                'message': '–°–Ω—ñ–≥–æ–ø–∞–¥ - —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å –¥–ª—è –≥–∞—Ä—è—á–æ—ó –ø—ñ—Ü–∏ –∑ –±–∞–≥–∞—Ç—å–º–∞ —Å–∏—Ä–∞–º–∏!',
                'recommended_pizza': '–ö–≤–∞—Ç—Ä–æ –§–æ—Ä–º–∞–¥–∂—ñ',
                'reason': '–ì–∞—Ä—è—á–∞ —Ç–∞ —Å–∏—Ä–Ω–∞'
            }
        elif '—Ö–º–∞—Ä–Ω–æ' in description or 'cloud' in description:
            return {
                'title': '‚òÅÔ∏è –•–º–∞—Ä–Ω–∞ –ø–æ–≥–æ–¥–∞!',
                'message': '–ü–æ—Ö–º—É—Ä–∏–π –¥–µ–Ω—å —Å—Ç–∞–Ω–µ —è—Å–∫—Ä–∞–≤—ñ—à–∏–º –∑ –Ω–∞—à–æ—é —è—Å–∫—Ä–∞–≤–æ—é –ì–∞–≤–∞–π—Å—å–∫–æ—é –ø—ñ—Ü–æ—é!',
                'recommended_pizza': '–ì–∞–≤–∞–π—Å—å–∫–∞',
                'reason': '–Ø—Å–∫—Ä–∞–≤–∞ —Ç–∞ —Å–º–∞—á–Ω–∞'
            }
        else:
            return {
                'title': 'üå§Ô∏è –ß—É–¥–æ–≤–∞ –ø–æ–≥–æ–¥–∞!',
                'message': '–í —Ç–∞–∫—É –ø–æ–≥–æ–¥—É —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—ñ–π–¥–µ –Ω–∞—à–∞ –ø–æ–ø—É–ª—è—Ä–Ω–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞!',
                'recommended_pizza': '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
                'reason': '–ö–ª–∞—Å–∏—á–Ω–∞ —Ç–∞ —É–ª—é–±–ª–µ–Ω–∞'
            }

def get_weather_icon_emoji(icon_code):
    icon_map = {
        '01d': '‚òÄÔ∏è',  
        '01n': 'üåô', 
        '02d': '‚õÖ',  
        '02n': '‚òÅÔ∏è',  
        '03d': '‚òÅÔ∏è',
        '03n': '‚òÅÔ∏è',
        '04d': '‚òÅÔ∏è',
        '04n': '‚òÅÔ∏è',
        '09d': 'üåßÔ∏è',
        '09n': 'üåßÔ∏è',
        '10d': 'üå¶Ô∏è',
        '10n': 'üåßÔ∏è',
        '11d': '‚õàÔ∏è',
        '11n': '‚õàÔ∏è',
        '13d': '‚ùÑÔ∏è',
        '13n': '‚ùÑÔ∏è',
        '50d': 'üå´Ô∏è',
        '50n': 'üå´Ô∏è', 
    }
    return icon_map.get(icon_code, 'üå§Ô∏è')
